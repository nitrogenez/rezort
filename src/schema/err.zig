const std = @import("std");

pub const Response = struct {
    location: []const u8,
    type: []const u8,
    max: ?u32 = null,
    permission: ?[]const u8 = null,
    collection: ?[]const u8 = null,
    operation: ?[]const u8 = null,
};

pub const Error = error{
    UnknownError,
    AlreadyOnboarded,
    UsernameTaken,
    InvalidUsername,
    DiscriminatorChangeRatelimited,
    UnknownUser,
    AlreadyFriends,
    AlreadySentRequest,
    Blocked,
    BlockedByOther,
    NotFriends,
    TooManyPendingFriendRequests,
    UnknownChannel,
    UnknownAttachment,
    UnknownMessage,
    CannotEditMessage,
    CannotJoinCall,
    TooManyAttachments,
    TooManyEmbeds,
    TooManyReplies,
    TooManyChannels,
    EmptyMessage,
    PayloadTooLarge,
    CannotRemoveYourself,
    GroupTooLarge,
    AlreadyInGroup,
    NotInGroup,
    UnknownServer,
    InvalidRole,
    Banned,
    TooManyServers,
    TooManyEmoji,
    TooManyRoles,
    AlreadyInServer,
    ReachedMaximumBots,
    IsBot,
    BotIsPrivate,
    CannotReportYourself,
    MissingPermission,
    MissingUserPermission,
    NotElevated,
    NotPrivileged,
    CannotGiveMissingPermissions,
    NotOwner,
    DatabaseError,
    InternalError,
    InvalidOperation,
    InvalidCredentials,
    InvalidProperty,
    InvalidSession,
    DuplicateNonce,
    NotFound,
    NoEffect,
    FailedValidation,
    VosoUnavailable,
};

pub const map = std.StaticStringMap(Error).initComptime(.{
    .{ "UnknownError", Error.UnknownError },
    .{ "AlreadyOnboarded", Error.AlreadyOnboarded },
    .{ "UsernameTaken", Error.UsernameTaken },
    .{ "InvalidUsername", Error.InvalidUsername },
    .{ "DiscriminatorChangeRatelimited", Error.DiscriminatorChangeRatelimited },
    .{ "UnknownUser", Error.UnknownUser },
    .{ "AlreadyFriends", Error.AlreadyFriends },
    .{ "AlreadySentRequest", Error.AlreadySentRequest },
    .{ "Blocked", Error.Blocked },
    .{ "BlockedByOther", Error.BlockedByOther },
    .{ "NotFriends", Error.NotFriends },
    .{ "TooManyPendingFriendRequests", Error.TooManyPendingFriendRequests },
    .{ "UnknownChannel", Error.UnknownChannel },
    .{ "UnknownAttachment", Error.UnknownAttachment },
    .{ "UnknownMessage", Error.UnknownMessage },
    .{ "CannotEditMessage", Error.CannotEditMessage },
    .{ "CannotJoinCall", Error.CannotJoinCall },
    .{ "TooManyAttachments", Error.TooManyAttachments },
    .{ "TooManyEmbeds", Error.TooManyEmbeds },
    .{ "TooManyReplies", Error.TooManyReplies },
    .{ "TooManyChannels", Error.TooManyChannels },
    .{ "EmptyMessage", Error.EmptyMessage },
    .{ "PayloadTooLarge", Error.PayloadTooLarge },
    .{ "CannotRemoveYourself", Error.CannotRemoveYourself },
    .{ "GroupTooLarge", Error.GroupTooLarge },
    .{ "AlreadyInGroup", Error.AlreadyInGroup },
    .{ "NotInGroup", Error.NotInGroup },
    .{ "UnknownServer", Error.UnknownServer },
    .{ "InvalidRole", Error.InvalidRole },
    .{ "Banned", Error.Banned },
    .{ "TooManyServers", Error.TooManyServers },
    .{ "TooManyEmoji", Error.TooManyEmoji },
    .{ "TooManyRoles", Error.TooManyRoles },
    .{ "AlreadyInServer", Error.AlreadyInServer },
    .{ "ReachedMaximumBots", Error.ReachedMaximumBots },
    .{ "IsBot", Error.IsBot },
    .{ "BotIsPrivate", Error.BotIsPrivate },
    .{ "CannotReportYourself", Error.CannotReportYourself },
    .{ "MissingPermission", Error.MissingPermission },
    .{ "MissingUserPermission", Error.MissingUserPermission },
    .{ "NotElevated", Error.NotElevated },
    .{ "NotPrivileged", Error.NotPrivileged },
    .{ "CannotGiveMissingPermissions", Error.CannotGiveMissingPermissions },
    .{ "NotOwner", Error.NotOwner },
    .{ "DatabaseError", Error.DatabaseError },
    .{ "InternalError", Error.InternalError },
    .{ "InvalidOperation", Error.InvalidOperation },
    .{ "InvalidCredentials", Error.InvalidCredentials },
    .{ "InvalidProperty", Error.InvalidProperty },
    .{ "InvalidSession", Error.InvalidSession },
    .{ "DuplicateNonce", Error.DuplicateNonce },
    .{ "NotFound", Error.NotFound },
    .{ "NoEffect", Error.NoEffect },
    .{ "FailedValidation", Error.FailedValidation },
    .{ "VosoUnavailable", Error.VosoUnavailable },
});
